#!/usr/bin/env python

import argparse
import logging
import os
import sys
import re

from helpers import quads_load_config
from elastic import Elastic

logger = logging.getLogger('quads-validation')
ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)


def get_hosts(result_file):
    _result = None
    try:
        with open(result_file, 'r') as validation_result:
            _result = validation_result.read()
    except Exception as e:
        print("Error reading in result file from validations : {}".format(e))
        exit(1)

    _hosts = []
    if len(_result.split()) > 0:
        for line in _result.split():
            if re.findall(r'(.*\.)+', line):
                if re.findall(r'(\d+\.\d+\.\d+\.\d+)', line):
                    continue
                else:
                    _hosts.append(line)
    if len(_hosts) < 1:
        print("Error no hosts could be read in.")
        exit(1)

    return _hosts


def index_data(_hosts, owner, cloud, ticket, index, _type):
    message = "\n".join(_hosts)
    payload = {"message": message,
               "hosts": list(_hosts),
               }
    if owner:
        payload["owner"] = owner
    if cloud:
        payload["cloud"] = cloud
    if ticket:
        payload["ticket"] = ticket

    if not index:
        print("Missing index")
        exit(1)
    if not _type:
        print("Missing type")
        exit(1)

    es = Elastic(quads_config['elastic_host'], quads_config['elastic_port'])
    es.index(payload, index, _type)


if __name__ == "__main__":
    quads_config_file = os.path.dirname(__file__) + "/../conf/quads.yml"
    quads_config = quads_load_config(quads_config_file)

    if "data_dir" not in quads_config:
        print("quads: Missing \"data_dir\" in " + quads_config_file)
        exit(1)

    if "install_dir" not in quads_config:
        print("quads: Missing \"install_dir\" in " + quads_config_file)
        exit(1)

    if "quads_base_url" not in quads_config:
        print("quads: Missing \"quads_base_url\" in " + quads_config_file)
        exit(1)

    if "elastic_host" not in quads_config:
        print("quads: Missing \"elastic_host\" in " + quads_config_file)
        exit(1)

    if "elastic_port" not in quads_config:
        print("quads: Missing \"elastic_port\" in " + quads_config_file)
        exit(1)

    sys.path.append(quads_config["install_dir"] + "/lib")
    sys.path.append(os.path.dirname(__file__) + "/../lib")

    parser = argparse.ArgumentParser(description='Index result file into Elastic')
    parser.add_argument(
        '--resultfile',
        dest='resultfile',
        default=None,
        type=str,
        help="Validation result file generated by quads"
    )
    parser.add_argument('--index', dest='index', default=None, type=str, help="Elastic index")
    parser.add_argument('--type', dest='type', default=None, type=str, help="Elastic type")
    parser.add_argument('--owner', dest='owner', default=None, type=str, help="Owner of the cloud")
    parser.add_argument('--ticket', dest='ticket', default=None, type=str, help="Ticket for the cloud")
    parser.add_argument('--cloud', dest='cloud', default=None, type=str, help="Cloud id")
    options = parser.parse_args()

    hosts = get_hosts(options.resultfile)

    index_data(
        hosts,
        options.owner,
        options.cloud,
        options.ticket,
        options.index,
        options.type
    )
