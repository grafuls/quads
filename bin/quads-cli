#!/usr/bin/env python3

import argparse
import datetime
import logging
import os
from json import JSONDecodeError

import requests
import subprocess
import sys
import yaml


# Load QUADS yaml config
def quads_load_config(_quads_config):
    quads_config_yaml = None
    try:
        with open(_quads_config, 'r') as config_file:
            try:
                quads_config_yaml = yaml.safe_load(config_file)
            except yaml.YAMLError:
                print("quads: Invalid YAML config: " + _quads_config)
                exit(1)
    except Exception as ex:
        print(ex)
        exit(1)
    return quads_config_yaml


logger = logging.getLogger('quads')
ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

API = 'v2'


def output_json_result(request, data, debug=False):
    try:
        js = request.json()
        if debug:
            print('%s %s: %s' % (request.status_code, request.reason, data))
        else:
            for result in js['result']:
                print(result)
    except JSONDecodeError:
        print('Could not parse json reply.')
        if debug:
            print(request.text)
        else:
            print('use --debug to see contents')
        exit(1)


def main(_args):
    # List all common call
    if _args.action:
        _action = _args.action
        _prefix = ""
        _sufix = ""
        if _args.action == "schedule":
            _action = "current_schedule"
        if _args.cloudonly:
            _prefix = "?"
            _sufix += '%scloud=%s' % (_prefix, _args.cloudonly)
        if _args.host:
            _action = "schedule"
            _prefix = "&" if _prefix else "?"
            _sufix += '%shost=%s' % (_prefix, _args.host)
        if _args.datearg:
            _prefix = "&" if _prefix else "?"
            _sufix += '%sdate=%s' % (
                _prefix,
                datetime.datetime.strptime(_args.datearg, '%Y-%m-%d %H:%M').isoformat()
            )
        url = os.path.join(api_url, _action, _sufix)
        if _args.debug:
            print(url)
        _response = requests.get(url)

        if _response.ok:
            data = _response.json()
            if _args.debug:
                print(data)
            if type(data) == dict:
                if "No results." in data.get('result', []):
                    print("No results.")
                    exit(0)
                else:
                    data = [data]
            if _args.action in ['owner', 'ticket', 'qinq', 'wipe']:
                for k in data:
                    print(str(k['name']) + ": " + str(k[_args.action]))
            elif _args.action in ['schedule']:
                if type(data) == list and data:
                    if _args.host:
                        _cloud_url = os.path.join(api_url, 'cloud')
                        _cloud_response = requests.get(_cloud_url)
                        _cloud_data = []
                        if _cloud_response.ok:
                            _cloud_data = _cloud_response.json()
                        _host_url = os.path.join(api_url, 'host?name=%s' % _args.host)
                        _host_response = requests.get(_host_url)
                        _default_cloud = "None"
                        if _host_response.ok:
                            _host_data = _host_response.json()
                            if "cloud" in _host_data:
                                _default_cloud = _host_data["cloud"]
                        print("Default cloud: %s" % _default_cloud)
                        _schedule_url = os.path.join(api_url, 'current_schedule?host=%s' % _args.host)
                        _schedule_response = requests.get(_schedule_url)
                        if _schedule_response.ok:
                            _schedule_data = _schedule_response.json()
                            _current_cloud = "cloud01"
                            for cloud in _cloud_data:
                                if "cloud" in _schedule_data and cloud["_id"] == _schedule_data["cloud"]:
                                    _current_cloud = cloud["name"]
                            if "cloud" in _schedule_data and _current_cloud != "cloud01":
                                print("Current cloud: %s" % _current_cloud)
                                print("Current schedule: %s" % _schedule_data["_id"]["$oid"])
                            else:
                                print("Current cloud: %s" % _default_cloud)
                        for schedule in data:
                            _cloud_name = ""
                            for cloud in _cloud_data:
                                if "name" in cloud and cloud["_id"] == schedule["cloud"]:
                                    _cloud_name = cloud["name"]
                            start = datetime.datetime.utcfromtimestamp(int(schedule["start"]["$date"]) / 1000)
                            end = datetime.datetime.utcfromtimestamp(int(schedule["end"]["$date"]) / 1000)
                            print(
                                "%s| start=%s, end=%s, cloud=%s" % (
                                    schedule["_id"]["$oid"],
                                    start,
                                    end,
                                    _cloud_name)
                            )
                    else:
                        clouds = set([schedule['cloud']['$oid'] for schedule in data])
                        for cloud in clouds:
                            _cloud_url = os.path.join(api_url, 'cloud')
                            _cloud_url += '?id=%s' % cloud
                            _cloud_response = requests.get(_cloud_url)
                            if _cloud_response.ok:
                                _cloud_data = _cloud_response.json()
                                if _cloud_data:
                                    _cloud_name = _cloud_data["name"]
                            else:
                                # TODO: figure out what to do with schedules which cloud has been removed
                                continue
                            print("%s:" % _cloud_name)
                            entries = set([entry["host"]["$oid"] for entry in data if entry['cloud']['$oid'] == cloud])
                            for entry in entries:
                                _host_url = os.path.join(api_url, 'host')
                                _hosts_response = requests.get(_host_url)
                                _hosts = _hosts_response.json()
                                if _hosts:
                                    _host = next(iter([host for host in _hosts if entry == host['_id']['$oid']]))
                                print("- %s" % str(_host['name']))
            elif _args.action in ['host', 'cloud']:
                if type(data) == list and data:
                    for entry in data:
                        print(entry['name'])
            exit(0)
        else:
            # TODO: is this host or generic?
            print('%s host %s %s' % (_response.status_code, _args.rmhost, _response.reason))

    # Cloud Add / Modify
    elif _args.cloudresource:
        url = os.path.join(api_url, 'cloud')
        data = {'name': _args.cloudresource,
                'description': _args.description,
                'owner': _args.cloudowner,
                'ccuser': _args.ccusers,
                'qinq': _args.qinq,
                'wipe': _args.wipe,
                'ticket': _args.cloudticket,
                'force': _args.force}
        _response = requests.post(url, data)
        output_json_result(_response, data)

    # Cloud Remove
    elif _args.rmcloud is not None:
        url = os.path.join(api_url, 'cloud', _args.rmcloud)
        _response = requests.delete(url)
        output_json_result(_response, {'cloud': _args.rmcloud})

    # Host Add / Modify
    elif _args.hostresource:
        if _args.cloudresource:
            print('--define-cloud and --define-host are mutually exclusive.')
            exit(1)
        url = os.path.join(api_url, 'host')
        data = {'name': _args.hostresource,
                'cloud': _args.hostcloud,
                'host_type': _args.hosttype,
                'force': _args.force}
        _response = requests.post(url, data)
        output_json_result(_response, data)

    # Host Remove
    elif _args.rmhost is not None:
        url = os.path.join(api_url, 'host', _args.rmhost)
        _response = requests.delete(url)
        output_json_result(_response, {'host': _args.rmhost})

    # Add Interface
    elif _args.addinterface:
        if _args.ifmac is None or _args.iftype is None \
                or _args.ifport is None or _args.host is None:
            print('Missing option. All these options are required for --add-interface:')
            print('    --host')
            print('    --interface-mac')
            print('    --interface-type')
            print('    --interface-port')
        url = os.path.join(api_url, 'interfaces')
        data = {'mac': _args.ifmac,
                'vendor_type': _args.iftype,
                'host': _args.host,
                'port': _args.ifport,
                'interface': _args.addinterface}
        _response = requests.post(url, data)
        print(data)
        output_json_result(_response, {'interfaces': 'cli-TODO'})

    elif _args.rminterface is not None:
        url = os.path.join(api_url, 'interfaces', str(_args.rminterface), _args.host)
        _response = requests.delete(url)
        output_json_result(_response, {'interface': 'cli-TODO'}, debug=_args.debug)

    # Add Schedule
    elif _args.addschedule:
        if _args.schedstart is None or _args.schedend is None \
                or _args.schedcloud is None or _args.host is None:
            print('Missing option. All these options are required for --add-schedule:')
            print('    --host')
            print('    --schedule-start')
            print('    --schedule-end')
            print('    --schedule-cloud')
        url = os.path.join(api_url, 'schedule')
        data = {'cloud': _args.schedcloud,
                'host': _args.host,
                'start': _args.schedstart,
                'end': _args.schedend}
        _response = requests.post(url, data)
        output_json_result(_response, {'schedule': 'cli-TODO'})

    elif _args.rmschedule is not None:
        url = os.path.join(api_url, 'schedule', str(_args.rmschedule), _args.host)
        _response = requests.delete(url)
        output_json_result(_response, {'schedule': 'cli-TODO'}, debug=_args.debug)

    elif _args.modschedule is not None:
        if _args.host is None:
            print('Missing option. Need --host when using --mod-schedule')
            exit(1)

        if _args.schedstart is None and _args.schedend is None and _args.schedcloud is None:
            print('Missing option. At least one these options are required for --mod-schedule:')
            print('    --schedule-start')
            print('    --schedule-end')
            print('    --schedule-cloud')
            exit(1)

        url = os.path.join(api_url, 'schedule')
        data = {'schedule': _args.modschedule,
                'start': _args.schedstart,
                'end': _args.schedend,
                'cloud': _args.schedcloud,
                'host': _args.host}
        _response = requests.post(url, data)
        output_json_result(_response, data['schedule'])

    elif _args.movehosts:
        if _args.datearg is not None and not _args.dryrun:
            print('--move-hosts and --date are mutually exclusive unless using --dry-run.')
            exit(1)
        url = os.path.join(api_url, 'moves')
        data = {'statedir': _args.statedir}
        if _args.datearg is not None:
            data['date'] = _args.datearg
        _response = requests.post(url, data)
        js = _response.json()
        if 'result' in js:
            if len(js['result']) == 0:
                print('Nothing to do.')
                exit(0)
            for result in js['result']:
                host = result['host']
                current = result['current']
                new = result['new']
                # now we need to know if we should wipe
                url = os.path.join(api_url, 'lswipe')
                data = {'cloudonly': new}
                _response = requests.post(url, data)
                wipe_js = _response.json()
                wipe_value = '1'
                if 'wipe' in wipe_js:
                    if len(wipe_js['wipe']) == 0:
                        print('ERROR')
                        exit(1)
                    for wipe in wipe_js['wipe']:
                        wipe_value = wipe[new]
                print('Moving ' + host + ' from ' + current + ' to ' + new + ', wipe = ' + wipe_value)
                if not _args.dryrun:
                    try:
                        if wipe_value == '1':
                            subprocess.check_call([_args.movecommand, host, current, new])
                        else:
                            subprocess.check_call([_args.movecommand, host, current, new, 'nowipe'])
                    except Exception as ex:
                        logger.error('Move command failed: %s' % ex)
                        exit(1)
                    stream = open(_args.statedir + '/' + host, 'w')
                    stream.write(new + '\n')
                    stream.close()

            exit(0)
        print('No result received')

        exit(0)


if __name__ == '__main__':
    quads_config_file = os.path.dirname(__file__) + '/../conf/quads.yml'
    quads_config = quads_load_config(quads_config_file)

    if 'data_dir' not in quads_config:
        print('quads: Missing \'data_dir\' in ' + quads_config_file)
        exit(1)

    if 'install_dir' not in quads_config:
        print('quads: Missing \'install_dir\' in ' + quads_config_file)
        exit(1)

    if 'quads_base_url' not in quads_config:
        print('quads: Missing \'quads_base_url\' in ' + quads_config_file)
        exit(1)
    else:
        api_url = os.path.join(quads_config['quads_base_url'], 'api', API)

    sys.path.append(quads_config['install_dir'])

    sys.path.append(os.path.dirname(__file__) + '/../')

    default_config = quads_config['data_dir'] + '/schedule.yaml'
    default_state_dir = quads_config['data_dir'] + '/state'
    default_move_command = '/bin/echo'

    parser = argparse.ArgumentParser(description='Query current cloud for a given host')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--ls-owner', dest='action', action='store_const', const='owner', help='List owners')
    group.add_argument('--ls-cc-users', dest='action', action='store_const', const='ccuser', help='List CC list')
    group.add_argument('--ls-ticket', dest='action', action='store_const', const='ticket', help='List request ticket')
    group.add_argument('--ls-qinq', dest='action', action='store_const', const='qinq', help='List cloud qinq state')
    group.add_argument('--ls-wipe', dest='action', action='store_const', const='wipe', help='List cloud wipe state')
    group.add_argument('--define-host', dest='hostresource', type=str, default=None, help='Define a host resource')
    group.add_argument('--define-cloud', dest='cloudresource', type=str, default=None,
                       help='Define a cloud environment')
    group.add_argument('--add-schedule', dest='addschedule', action='store_true', help='Define a host reservation')
    group.add_argument('--mod-schedule', dest='modschedule', type=str, default=None, help='Modify a host reservation')
    group.add_argument('--add-interface', dest='addinterface', type=str, default=None, help='Define a host interface')
    group.add_argument('--rm-schedule', dest='rmschedule', type=str, default=None, help='Remove a host reservation')
    group.add_argument('--rm-interface', dest='rminterface', type=str, default=None, help='Remove a host interface')
    group.add_argument('--ls-hosts', dest='action', action='store_const', const='host', help='List all hosts')
    group.add_argument('--ls-clouds', dest='action', action='store_const', const='cloud', help='List all clouds')
    group.add_argument('--rm-host', dest='rmhost', type=str, default=None, help='Remove a host')
    group.add_argument('--rm-cloud', dest='rmcloud', type=str, default=None, help='Remove a cloud')
    parser.add_argument('--host', dest='host', type=str, default=None, help='Specify the host to query')
    parser.add_argument('--cloud-only', dest='cloudonly', type=str, default=None,
                        help='Limit full report to hosts only in this cloud')
    parser.add_argument('-c', '--config', dest='config', help='YAML file with cluster data', default=default_config,
                        type=str)
    parser.add_argument('-d', '--datetime', dest='datearg', type=str, default=None,
                        help='date and time to query; e.g. \'2016-06-01 08:00\'')
    parser.add_argument('--cloud-owner', dest='cloudowner', type=str, default=None, help='Define environment owner')
    parser.add_argument('--cc-users', dest='ccusers', type=str, default=None, help='Define environment CC list')
    parser.add_argument('--qinq', dest='qinq', type=str, default=None, help='Define environment qinq state')
    parser.add_argument('--wipe', dest='wipe', type=str, default=None, help='Define environment wipe state')
    parser.add_argument('--cloud-ticket', dest='cloudticket', type=str, default=None, help='Define environment ticket')
    parser.add_argument('--description', dest='description', type=str, default=None,
                        help='Defined description of cloud')
    parser.add_argument('--default-cloud', dest='hostcloud', type=str, default=None,
                        help='Defined default cloud for a host')
    parser.add_argument('--force', dest='force', action='store_true',
                        help='Force host or cloud update when already defined')
    parser.add_argument('--summary', dest='summary', action='store_true', help='Generate a summary report')
    parser.add_argument('--full-summary', dest='fullsummary', action='store_true', help='Generate a summary report')
    parser.add_argument('--schedule-query', dest='schedquery', action='store_true',
                        help='Query the schedule for a specific month')
    parser.add_argument('--month', dest='month', type=str, default=datetime.datetime.now().month,
                        help='Query the schedule for a specific month and year')
    parser.add_argument('--year', dest='year', type=str, default=datetime.datetime.now().year,
                        help='Query the schedule for a specific month and year')
    parser.add_argument('--schedule-start', dest='schedstart', type=str, default=None, help='Schedule start date/time')
    parser.add_argument('--schedule-end', dest='schedend', type=str, default=None, help='Schedule end date/time')
    parser.add_argument('--schedule-cloud', dest='schedcloud', type=str, default=None, help='Schedule cloud')
    parser.add_argument('--ls-schedule', dest='action', action='store_const', const='schedule',
                        help='List the host reservations')
    parser.add_argument('--interface-mac', dest='ifmac', type=str, default=None, help='')
    parser.add_argument('--interface-type', dest='iftype', type=str, default=None, help='')
    parser.add_argument('--interface-port', dest='ifport', type=str, default=None, help='')
    parser.add_argument('--ls-interface', dest='action', action='store_const', const='interfaces',
                        help='List the host interfaces')
    parser.add_argument('--statedir', dest='statedir', type=str, default=default_state_dir, help='Default state dir')
    parser.add_argument('--move-hosts', dest='movehosts', action='store_true', default=None,
                        help='Move hosts if schedule has changed')
    parser.add_argument('--move-command', dest='movecommand', type=str, default=default_move_command,
                        help='External command to move a host')
    parser.add_argument('--dry-run', dest='dryrun', action='store_true', default=None,
                        help='Dont update state when used with --move-hosts')
    parser.add_argument('--log-path', dest='logpath', type=str, default=None, help='Path to quads log file')
    parser.add_argument('--post-config', dest='postconfig', type=str, default=None, nargs='+', choices=['openstack'],
                        help='Post provisioning configuration to apply')
    parser.add_argument('--version', dest='version', type=str, default=None, help='Version of Software to apply')
    parser.add_argument('--puddle', dest='puddle', type=str, default='latest', help='Puddle to apply')
    parser.add_argument('--os-control-scale', dest='controlscale', type=int, default=None,
                        help='Number of controller nodes for OpenStack deployment')
    parser.add_argument('--os-compute-scale', dest='computescale', type=int, default=None,
                        help='Number of compute nodes for OpenStack deployment')
    parser.add_argument('--host-type', dest='hosttype', type=str, default=None,
                        help='Model/Make/Type of host DellR620  for example')
    parser.add_argument('--debug', action='store_true', default=False, help='Show debugging information.')

    args = parser.parse_args()
    main(args)
