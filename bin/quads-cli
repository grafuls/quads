#!/usr/bin/env python3

import argparse
import datetime
import logging
import os
import requests
import subprocess
import sys
from quads.helpers import quads_load_config

logger = logging.getLogger('quads')
ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

API = 'v2'


def output_json_result(request, item, data, debug=False):
    try:
        js = request.json()
        if debug:
            print('%s %s: %s' % (request.status_code, request.reason, data))
        else:
            for result in js['result']:
                print(result)
    except Exception:
        print('Could not parse json reply.')
        if debug:
            print(request.text)
        else:
            print('use --debug to see contents')
        exit(1)


def main():
    quads_config_file = os.path.dirname(__file__) + '/../conf/quads.yml'
    quads_config = quads_load_config(quads_config_file)

    if 'data_dir' not in quads_config:
        print('quads: Missing \'data_dir\' in ' + quads_config_file)
        exit(1)

    if 'install_dir' not in quads_config:
        print('quads: Missing \'install_dir\' in ' + quads_config_file)
        exit(1)

    if 'quads_base_url' not in quads_config:
        print('quads: Missing \'quads_base_url\' in ' + quads_config_file)
        exit(1)
    else:
        api_url = os.path.join(quads_config['quads_base_url'], 'api', API)

    sys.path.append(quads_config['install_dir'])

    sys.path.append(os.path.dirname(__file__) + '/../')

    defaultconfig = quads_config['data_dir'] + '/schedule.yaml'
    defaultstatedir = quads_config['data_dir'] + '/state'
    defaultmovecommand = '/bin/echo'

    parser = argparse.ArgumentParser(description='Query current cloud for a given host')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--ls-owner', dest='action', action='store_const', const='owner', help='List owners')
    group.add_argument('--ls-cc-users', dest='action', action='store_const', const='ccuser', help='List CC list')
    group.add_argument('--ls-ticket', dest='action', action='store_const', const='ticket', help='List request ticket')
    group.add_argument('--ls-qinq', dest='action', action='store_const', const='qinq', help='List cloud qinq state')
    group.add_argument('--ls-wipe', dest='action', action='store_const', const='wipe', help='List cloud wipe state')
    group.add_argument('--define-host', dest='hostresource', type=str, default=None, help='Define a host resource')
    group.add_argument('--define-cloud', dest='cloudresource', type=str, default=None,
                       help='Define a cloud environment')
    group.add_argument('--add-schedule', dest='addschedule', action='store_true', help='Define a host reservation')
    group.add_argument('--mod-schedule', dest='modschedule', type=int, default=None, help='Modify a host reservation')
    group.add_argument('--add-interface', dest='addinterface', type=str, default=None, help='Define a host interface')
    group.add_argument('--rm-schedule', dest='rmschedule', type=int, default=None, help='Remove a host reservation')
    group.add_argument('--rm-interface', dest='rminterface', type=str, default=None, help='Remove a host interface')
    group.add_argument('--ls-hosts', dest='action', action='store_const', const='host', help='List all hosts')
    group.add_argument('--ls-clouds', dest='action', action='store_const', const='cloud', help='List all clouds')
    group.add_argument('--rm-host', dest='rmhost', type=str, default=None, help='Remove a host')
    group.add_argument('--rm-cloud', dest='rmcloud', type=str, default=None, help='Remove a cloud')
    parser.add_argument('--host', dest='host', type=str, default=None, help='Specify the host to query')
    parser.add_argument('--cloud-only', dest='cloudonly', type=str, default=None,
                        help='Limit full report to hosts only in this cloud')
    parser.add_argument('-c', '--config', dest='config', help='YAML file with cluster data', default=defaultconfig,
                        type=str)
    parser.add_argument('-d', '--datetime', dest='datearg', type=str, default=None,
                        help='date and time to query; e.g. \'2016-06-01 08:00\'')
    parser.add_argument('--cloud-owner', dest='cloudowner', type=str, default=None, help='Define environment owner')
    parser.add_argument('--cc-users', dest='ccusers', type=str, default=None, help='Define environment CC list')
    parser.add_argument('--qinq', dest='qinq', type=str, default=None, help='Define environment qinq state')
    parser.add_argument('--wipe', dest='wipe', type=str, default=None, help='Define environment wipe state')
    parser.add_argument('--cloud-ticket', dest='cloudticket', type=str, default=None, help='Define environment ticket')
    parser.add_argument('--description', dest='description', type=str, default=None,
                        help='Defined description of cloud')
    parser.add_argument('--default-cloud', dest='hostcloud', type=str, default=None,
                        help='Defined default cloud for a host')
    parser.add_argument('--force', dest='force', action='store_true',
                        help='Force host or cloud update when already defined')
    parser.add_argument('--summary', dest='summary', action='store_true', help='Generate a summary report')
    parser.add_argument('--full-summary', dest='fullsummary', action='store_true', help='Generate a summary report')
    parser.add_argument('--schedule-query', dest='schedquery', action='store_true',
                        help='Query the schedule for a specific month')
    parser.add_argument('--month', dest='month', type=str, default=datetime.datetime.now().month,
                        help='Query the schedule for a specific month and year')
    parser.add_argument('--year', dest='year', type=str, default=datetime.datetime.now().year,
                        help='Query the schedule for a specific month and year')
    parser.add_argument('--schedule-start', dest='schedstart', type=str, default=None, help='Schedule start date/time')
    parser.add_argument('--schedule-end', dest='schedend', type=str, default=None, help='Schedule end date/time')
    parser.add_argument('--schedule-cloud', dest='schedcloud', type=str, default=None, help='Schedule cloud')
    parser.add_argument('--ls-schedule', dest='action', action='store_const', const='schedule',
                        help='List the host reservations')
    parser.add_argument('--interface-mac', dest='ifmac', type=str, default=None, help='')
    parser.add_argument('--interface-type', dest='iftype', type=str, default=None, help='')
    parser.add_argument('--interface-port', dest='ifport', type=str, default=None, help='')
    parser.add_argument('--ls-interface', dest='action', action='store_const', const='interfaces',
                        help='List the host interfaces')
    parser.add_argument('--statedir', dest='statedir', type=str, default=defaultstatedir, help='Default state dir')
    parser.add_argument('--move-hosts', dest='movehosts', action='store_true', default=None,
                        help='Move hosts if schedule has changed')
    parser.add_argument('--move-command', dest='movecommand', type=str, default=defaultmovecommand,
                        help='External command to move a host')
    parser.add_argument('--dry-run', dest='dryrun', action='store_true', default=None,
                        help='Dont update state when used with --move-hosts')
    parser.add_argument('--log-path', dest='logpath', type=str, default=None, help='Path to quads log file')
    parser.add_argument('--post-config', dest='postconfig', type=str, default=None, nargs='+', choices=['openstack'],
                        help='Post provisioning configuration to apply')
    parser.add_argument('--version', dest='version', type=str, default=None, help='Version of Software to apply')
    parser.add_argument('--puddle', dest='puddle', type=str, default='latest', help='Puddle to apply')
    parser.add_argument('--os-control-scale', dest='controlscale', type=int, default=None,
                        help='Number of controller nodes for OpenStack deployment')
    parser.add_argument('--os-compute-scale', dest='computescale', type=int, default=None,
                        help='Number of compute nodes for OpenStack deployment')
    parser.add_argument('--host-type', dest='hosttype', type=str, default=None,
                        help='Model/Make/Type of host DellR620  for example')
    parser.add_argument('--debug', action='store_true', default=False, help='Show debugging information.')

    args = parser.parse_args()
    # List all common call
    if args.action:
        url = os.path.join(api_url, args.action)
        if args.debug:
            print(url)
        if args.cloudonly:
            url += '?cloudonly=%s' % args.cloudonly
        if args.host:
            url += '?host=%s' % args.host
        r = requests.get(url)
        if r.ok:
            data = r.json()
            if args.debug:
                print(data)
            if args.action in ['owner', 'ticket', 'qinq', 'wipe']:
                for k in data:
                    print(str(k['cloud']) + ": " + str(k[args.action]))
            else:
                for k in data:
                    print(k[args.action])
            exit(0)
        else:
            # TODO: is this host or generic?
            print('%s host %s %s' % (r.status_code, args.rmhost, r.reason))

    # Cloud Add / Modify
    elif args.cloudresource:
        url = os.path.join(api_url, 'cloud')
        data = {'cloud': args.cloudresource,
                'description': args.description,
                'owner': args.cloudowner,
                'ccuser': args.ccusers,
                'qinq': args.qinq,
                'wipe': args.wipe,
                'ticket': args.cloudticket,
                'force': args.force}
        r = requests.post(url, data)
        output_json_result(r, 'cloud', data)

    # Cloud Remove
    elif args.rmcloud is not None:
        url = os.path.join(api_url, 'cloud', args.rmcloud)
        r = requests.delete(url)
        output_json_result(r, 'cloud', {'cloud': args.rmcloud})

    # Host Add / Modify
    elif args.hostresource:
        if args.cloudresource:
            print('--define-cloud and --define-host are mutually exclusive.')
            exit(1)
        url = os.path.join(api_url, 'host')
        data = {'host': args.hostresource,
                'cloud': args.hostcloud,
                'type': args.hosttype,
                'force': args.force}
        r = requests.post(url, data)
        output_json_result(r, 'host', data)

    # Host Remove
    elif args.rmhost is not None:
        url = os.path.join(api_url, 'host', args.rmhost)
        r = requests.delete(url)
        output_json_result(r, 'host', {'host': args.rmhost})

    # Add Interface
    elif args.addinterface:
        if args.ifmac is None or args.iftype is None \
                or args.ifport is None or args.host is None:
            print('Missing option. All these options are required for --add-interface:')
            print('    --host')
            print('    --interface-mac')
            print('    --interface-type')
            print('    --interface-port')
        url = os.path.join(api_url, 'interfaces')
        data = {'mac': args.ifmac,
                'vendor_type': args.iftype,
                'host': args.host,
                'port': args.ifport,
                'interface': args.addinterface}
        r = requests.post(url, data)
        print(data)
        output_json_result(r, 'interfaces', {'interfaces': 'cli-TODO'})

    elif args.rminterface is not None:
        url = os.path.join(api_url, 'interfaces', str(args.rminterface), args.host)
        r = requests.delete(url)
        output_json_result(r, 'interfaces', {'interface': 'cli-TODO'}, debug=args.debug)

    # Add Schedule
    elif args.addschedule:
        if args.schedstart is None or args.schedend is None \
                or args.schedcloud is None or args.host is None:
            print('Missing option. All these options are required for --add-schedule:')
            print('    --host')
            print('    --schedule-start')
            print('    --schedule-end')
            print('    --schedule-cloud')
        url = os.path.join(api_url, 'schedule')
        data = {'cloud': args.schedcloud,
                'host': args.host,
                'start': args.schedstart,
                'end': args.schedend}
        r = requests.post(url, data)
        print(data)
        output_json_result(r, 'schedule', {'schedule': 'cli-TODO'})

    elif args.rmschedule is not None:
        url = os.path.join(api_url, 'schedule', str(args.rmschedule), args.host)
        r = requests.delete(url)
        output_json_result(r, 'schedule', {'schedule': 'cli-TODO'}, debug=args.debug)

    elif args.modschedule is not None:
        if args.host is None:
            print('Missing option. Need --host when using --mod-schedule')
            exit(1)

        if args.schedstart is None and args.schedend is None and args.schedcloud is None:
            print('Missing option. At least one these options are required for --mod-schedule:')
            print('    --schedule-start')
            print('    --schedule-end')
            print('    --schedule-cloud')
            exit(1)

        url = os.path.join(api_url, 'mhs')
        data = {'schedule': args.modschedule,
                'start': args.schedstart,
                'end': args.schedend,
                'cloud': args.schedcloud,
                'host': args.host}
        r = requests.post(url, data)
        output_json_result(r, 'schedule', data['schedule'])

    elif args.movehosts:
        if args.datearg is not None and not args.dryrun:
            print('--move-hosts and --date are mutually exclusive unless using --dry-run.')
            exit(1)
        url = os.path.join(api_url, 'moves')
        data = {'statedir': args.statedir}
        if args.datearg is not None:
            data['date'] = args.datearg
        r = requests.post(url, data)
        js = r.json()
        if 'result' in js:
            if len(js['result']) == 0:
                print('Nothing to do.')
                exit(0)
            for result in js['result']:
                host = result['host']
                current = result['current']
                new = result['new']
                # now we need to know if we should wipe
                url = os.path.join(api_url, 'lswipe')
                data = {'cloudonly': new}
                r = requests.post(url, data)
                wipe_js = r.json()
                wipe_value = '1'
                if 'wipe' in wipe_js:
                    if len(wipe_js['wipe']) == 0:
                        print('ERROR')
                        exit(1)
                    for wipe in wipe_js['wipe']:
                        wipe_value = wipe[new]
                print('Moving ' + host + ' from ' + current + ' to ' + new + ', wipe = ' + wipe_value)
                if not args.dryrun:
                    try:
                        if wipe_value == '1':
                            subprocess.check_call([args.movecommand, host, current, new])
                        else:
                            subprocess.check_call([args.movecommand, host, current, new, 'nowipe'])
                    except Exception as ex:
                        logger.error('Move command failed: %s' % ex)
                        exit(1)
                    stream = open(args.statedir + '/' + host, 'w')
                    stream.write(new + '\n')
                    stream.close()

            exit(0)
        print('No result received')

        exit(0)
    # TODO
    # data = {}
    # if args.host:
    #    data['host'] = args.host

    # if args.cloudonly:
    #    data['cloud'] = args.cloudonly

    # if args.datearg:
    #    data['date'] = args.datearg

    # if args.summary:
    #    data['summary'] = args.summary

    # if args.fullsummary:
    #    data['fullsummary'] = args.fullsummary

    # url = os.path.join(api_url, 'query')
    # r = requests.post(url, data)
    # js = r.json()
    # if 'result' in js:
    #    if len(js['result']) == 0:
    #        exit(0)
    #    for result in js['result']:
    #        print result
    #    exit(0)
    # exit(0)


if __name__ == '__main__':
    main()
